(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

class SmartComponentManager {
    constructor() {
        this.components = [];
        this.componentsInstance={};
    }

    configure(params){
        this.params = params || {garbageCollector:false,garbageCollectorRootElement:null};

        if(this.params.garbageCollector){
            this.garbageCollectorRootElement=this.params.garbageCollectorRootElement || document.getElementsByTagName("BODY")[0];
            if(this.params.garbageCollector){
                this.mutationObserver= new MutationObserver(this.mutationHandler.bind(this));
                this.mutationObserver.observe(this.garbageCollectorRootElement.parentNode,{attributes: false, childList: true, characterData: false, subtree: true});
            }
        }
    }

    mutationHandler(mutationsList){
            if(mutationsList && mutationsList.length>0){
                let removedElements= mutationsList.filter((m) => {
                    return m.removedNodes.length > 0;
                }).reduce((prev, current) => {
                    return prev.concat(current.removedNodes);
                }, []);

                if(removedElements.length>0){
                   this.getComponentSubNodes(removedElements,[]).forEach((node)=>{
                       if(node.getAttribute && node.getAttribute("component-id")){
                           let componentInstance=this.getComponentInstanceById(node.getAttribute("component-id"));
                           if(componentInstance){
                               componentInstance.destroy();
                           }
                       }
                   });
                }
            }
        }

    getComponentSubNodes(removedElements,prevNodes){
        prevNodes =prevNodes || [];
        let rmElements=removedElements.length>0 ? removedElements:[removedElements];
        rmElements.forEach((removedNode)=>{
            let currentNode=removedNode;
            if(currentNode.length){
                prevNodes.push(this.getComponentSubNodes([].slice.call(currentNode),prevNodes));
            }else{
                if(currentNode.getAttribute && currentNode.getAttribute("component")){
                    prevNodes.push(currentNode);
                }
                if(currentNode.children && currentNode.children.length>0){
                    prevNodes.push(this.getComponentSubNodes([].slice.call(currentNode.children),prevNodes));
                }
            }

        });
        return prevNodes;
    }

    registerComponents(componentsClasses){
        Object.keys(componentsClasses).forEach((componentClassName)=>{
            if(!this.getComponent(componentClassName)){
                this.registerComponent(componentClassName,componentsClasses[componentClassName]);
            }
        });
    }


    registerComponent(name,clazz) {
        this.components.push({
            name: name,
            clazz: clazz
        });
    }


    registerComponentInstance(id,instance) {
        this.componentsInstance[id]=instance;
    }

    removeComponentInstance(id) {
        delete this.componentsInstance[id];
    }

    getComponentInstanceById(id){
        return this.componentsInstance[id];
    }

    initComponentByName(element,componentName){
        let instance=null;
        try{
            var clazz = this.getComponent(componentName);
            instance=new clazz(element); //Start Up Component
        }catch(e){
            console.error("Error when trying to instance Component " + componentName +": "+ e);
        }
        return instance;
    }

    getComponent(name) {
        var comp = this.components.filter(c => c.name == name).map(c => c.clazz)[0];
        return comp;
    }
}

var SmartComponentManager$1 = new SmartComponentManager();

class SmartComponent {
    constructor(element, parentComponent, params) {
        this.smart_init(element, parentComponent, params);
    }

    smart_init(element, parentComponent, params){
        this.garbageCollectorRootElement = element;
        this.bindedElements = {"click":[]};
        this._componentId =  this._generateUid();
        this.parentComponent = parentComponent;
        this.componentReferenceName = null;
        this.params = params || {};



        //Serve per recuperare il componente  tramite un nome di fantasia contenuto nell'attributo component-reference-name
        let componentReferenceName = this.params.componentReferenceName ? this.params.componentReferenceName : this.garbageCollectorRootElement.getAttribute("component-reference-name");
        componentReferenceName=componentReferenceName || this._componentId;

        this.componentReferenceName = componentReferenceName;
        if (!element.getAttribute("component-reference-name")) {
            element.setAttribute("component-reference-name", componentReferenceName);
        }

        if(!this.verifyComponentReferenceNameUnicity()){
            throw this.componentReferenceName +" componentReferenceName is already used in "+this.parentComponent.componentReferenceName +" hyerarchy";
            return false;
        }

        SmartComponentManager$1.registerComponentInstance(this._componentId,this);


        this.garbageCollectorRootElement.setAttribute("component-id",this._componentId);

        if(!this.garbageCollectorRootElement.getAttribute("component")){
            this.garbageCollectorRootElement.setAttribute("component",this.constructor.name);
        }


        if(this.parentComponent && !this.parentComponent.components){
            this.parentComponent.components={};
        }



        if(this.parentComponent){
            this.parentComponent.components[componentReferenceName] = this;
        }


        if(this.garbageCollectorRootElement.getAttribute("component-click")){
            this.bindComponentClick(this.garbageCollectorRootElement);
        }

        let nodesToBind =this._getComponentClickNodeToBind([this.garbageCollectorRootElement]);
        if(nodesToBind.length) {
            for (var i = 0; i < nodesToBind.length; i++) {
                this.checkComponentsHierarchyAndBindClick(nodesToBind[i]);
            }
        }

        //The mutationObserver is used in order to retrieve and handling component-"event"
        this.mutationObserver= new MutationObserver(this._mutationHandler.bind(this));
        this.mutationObserver.observe(this.garbageCollectorRootElement.parentNode,{attributes: false, childList: true, characterData: false, subtree: true});

    }

    _mutationHandler(mutationsList){
        this._eventMutationHandler(mutationsList);
    }


    verifyComponentReferenceNameUnicity(){
        return  !this.parentComponent || !this.parentComponent.components  ||  !this.parentComponent.components[this.componentReferenceName];
    }

    _generateUid() {
        return  this.constructor.name+"_"+'xxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    smart_clickHandler(ev) {
        let functionCode = ev.currentTarget.getAttribute('component-click');
        let functionName = functionCode.split("(")[0];

        function extractParams(...params) {

            let parameters=[].slice.call(arguments);
            return parameters.map((param)=>{
                if(param=="this"){
                    return ev;
                }else{
                    return param;
                }
            })
        }

        if(this[functionName]){
            this[functionName].apply(this, eval("extractParams("+functionCode.split("(")[1]));
        }
    }

    loadChildComponents(parentComponent) {
        let componentsLoaded=[];
        var componentsEls = this.garbageCollectorRootElement.querySelectorAll('[component]');
        for (var i = 0; i < componentsEls.length; i++) {
            var componentId = componentsEls[i].getAttribute('component-id');

            if (!componentId) {
                var component = componentsEls[i].getAttribute('component');
                var Clazz = SmartComponentManager$1.getComponent(component);
                componentsLoaded.push( new Clazz(componentsEls[i],parentComponent || this));
            }
        }
        return componentsLoaded;
    }

    _bindComponentClick(node) {

        let isAlreadyBinded=this.bindedElements["click"].reduce((accumulator,currentNode)=>{
            return accumulator || currentNode.isEqualNode(node);
        },false);

        if(!isAlreadyBinded){
            this.bindedElements["click"].push(node);
            node.addEventListener('click', (e)=> {
                this.smart_clickHandler(e);
            });
        }
    }

    checkComponentsHierarchyAndBindClick(node){
        let parentsComponent= this._getDomElementParents( node, '[component-reference-name]');
        if(parentsComponent.length>0 && parentsComponent[0].getAttribute("component-reference-name")==this.componentReferenceName){
            this._bindComponentClick(node);
        }else{
            return;
        }
    }

    _getDomElementParents(elem, selector){
        // Setup parents array
        var parents = [];
        // Get matching parent elements
        for ( ; elem && elem !== document; elem = elem.parentNode ) {
            // Add matching parents to array
            if (selector) {
                if (elem.matches(selector)) {
                    parents.push(elem);
                }
            } else {
                parents.push(elem);
            }
        }
        return parents;
    }


    _eventMutationHandler(mutationsList){
        if(mutationsList && mutationsList.length>0){
            let mutationElements= mutationsList.filter((m) => {
                return m.addedNodes.length > 0;
            }).reduce((prev, current) => {
                return prev.concat(this._getComponentClickNodeToBind(current.addedNodes));
            }, []);

            if(mutationElements.length){
                for (var i = 0; i < mutationElements.length; i++) {
                    this.checkComponentsHierarchyAndBindClick(mutationElements[i]);
                }
            }
        }
    }



    _getComponentClickNodeToBind(modesToCheck){
        let nodesToBind=[];
        if(modesToCheck.length){
            for (var i = 0; i < modesToCheck.length; i++) {
                let node=modesToCheck[i];
                if(node.querySelectorAll){
                    let componentClickElements =node.querySelectorAll('[component-click]');
                    if (componentClickElements.length > 0) {
                        for (let i = 0; i < componentClickElements.length; i++) {
                            nodesToBind.push(componentClickElements[i]);
                        }
                    }
                }
            }
        }
        return nodesToBind;
    }


    /**
     * Called by ComponentManager  when dom component is removed, otherwise you can also call it directly if you need or override it
     */

    destroy(){
        console.log(this.componentReferenceName + " destroyed");
        this.mutationObserver.disconnect();
        SmartComponentManager$1.removeComponentInstance(this._componentId);
        if(this.garbageCollectorRootElement.isConnected){
            this.garbageCollectorRootElement.remove();
        }

        // for all properties
        for (const prop of Object.getOwnPropertyNames(this)) {
            delete this[prop];
        }


    }

}

class TestManager {
    constructor() {
        this.clickEventsCounter={};
    }

    getClickEvents(componentReferenceName){
        if (typeof  this.clickEventsCounter[componentReferenceName]=== "undefined"){
            this.clickEventsCounter[componentReferenceName]=0;
        }
        return this.clickEventsCounter[componentReferenceName];
    }

    addClickEvent(componentReferenceName){
        if (typeof  this.clickEventsCounter[componentReferenceName] === "undefined"){
            this.clickEventsCounter[componentReferenceName]=0;
        }
        this.clickEventsCounter[componentReferenceName]++;
        return this.clickEventsCounter[componentReferenceName];
    }
}

var TestManager$1 = new TestManager();

class TestComponent extends SmartComponent{

    constructor(element,parentComponent,params) {
        super(element,parentComponent,params);
    }

    clickHandler(){
        console.log(this.componentReferenceName);
        TestManager$1.addClickEvent(this.componentReferenceName);
    }

}

class StopClickPropagationComponent extends SmartComponent{

    constructor(element,parentComponent,params) {
        super(element,parentComponent,params);
    }

    clickHandler(ev){
        if(ev){
            ev.stopPropagation();
        }
        TestManager$1.addClickEvent(this.componentReferenceName);
    }
}

SmartComponentManager$1.registerComponents({TestComponent,StopClickPropagationComponent});
SmartComponentManager$1.configure({garbageCollector:true});

let testComponent=null;
let testComponent2=null;
let testComponent3=null;
let testComponent4=null;
let testComponent5=null;
let testComponent6=null;
let stopClickPropagationComponent=null;

describe('TestComponent1 - Instance by name', function() {
    testComponent = SmartComponentManager$1.initComponentByName(document.querySelector(`[component-reference-name="TestComponent1"]`),"TestComponent");
    it('TestComponent1 - should be instanced', function() {
        assert.equal(testComponent.constructor.name, "TestComponent");
    });
});

describe('TestComponent1 - load child components passing like parent TestComponent1', function() {
    it('TestComponent2 - TestComponent1 should be present like TestComponent2 parent', function() {
        let loadedComponents = testComponent.loadChildComponents(testComponent);
        testComponent2=loadedComponents.filter((component)=>{
            return component.componentReferenceName=="TestComponent2";
        })[0];
        assert.equal(testComponent2.parentComponent.componentReferenceName, "TestComponent1");
    });
});

describe('TestComponent2 component-click - click on TestComponent2 child on component-click attribute', function() {
    it('TestComponent2 - clickEventsNumber must be increase of one', async function() {
        let clickEventsNumberBefore=TestManager$1.getClickEvents("TestComponent2");
        document.querySelector(`[component-reference-name="TestComponent2"] [component-click="clickHandler()"]`).click();
        await setTimeout(()=>{},500);
        assert.equal(TestManager$1.getClickEvents("TestComponent2"), (clickEventsNumberBefore + 1));
    });
});


describe('TestComponent3/4 added dinamically - add dinamically TestComponent3 like child of TestComponent2', function() {
    it('TestComponent3/4 - should be present like child of TestComponent2', async function() {
        let testComponent2DomEl= document.querySelector(`[component-reference-name="TestComponent2"]`);
        var node=document.createElement('div');
        node.innerHTML=`
        <div>
            <div component="TestComponent"  component-reference-name="TestComponent3">
                <button component-click="clickHandler()">TestComponent3 Click Handler</button>
            </div>
    
            <div component="TestComponent"  component-reference-name="TestComponent4">
                <button component-click="clickHandler()">TestComponent4 Click Handler</button>
            </div>
        </div>`;
        testComponent2DomEl.appendChild(node.childNodes[1]);
        testComponent2.loadChildComponents();
        await setTimeout(()=>{},500);
        testComponent3=testComponent2.components["TestComponent3"];
        testComponent4=testComponent2.components["TestComponent4"];
        assert.equal(testComponent2.components["TestComponent3"].componentReferenceName, "TestComponent3");
        assert.equal(testComponent2.components["TestComponent4"].componentReferenceName, "TestComponent4");
    });
});


describe('TestComponent3 component-click - click on TestComponent3 child on component-click attribute', function() {
    it('TestComponent3 - clickEventsNumber must be increase of one', async function() {
        let clickEventsNumberBefore=TestManager$1.getClickEvents("TestComponent3");
        document.querySelector(`[component-reference-name="TestComponent3"] [component-click="clickHandler()"]`).click();
        await setTimeout(()=>{},500);
        assert.equal(TestManager$1.getClickEvents("TestComponent3"), (clickEventsNumberBefore + 1));
    });
});

describe('TestComponent5 instanced by javascript - instanced by javascript TestComponent5 under TestComponent2', function() {
    it('TestComponent5 - should be present like child of TestComponent2', async function() {
        let testComponent2DomEl= document.querySelector(`[component-reference-name="TestComponent2"]`);
        var node=document.createElement('div');
        node.innerHTML=`<div></div>`;
        let nodeToAppend=node.childNodes[0];
        testComponent2DomEl.appendChild(nodeToAppend);
        testComponent5 = new TestComponent(nodeToAppend,testComponent2,{componentReferenceName:"TestComponent5"});
        await setTimeout(()=>{},500);
        assert.equal(testComponent2.components["TestComponent5"].componentReferenceName, "TestComponent5");
    });
});


describe('TestComponent6 instanced by javascript - instanced by javascript TestComponent6 under TestComponent5', function() {
    it('TestComponent6 - should be present like child of TestComponent5', async function() {
        let testComponent5DomEl= document.querySelector(`[component-reference-name="TestComponent5"]`);
        var node=document.createElement('div');
        node.innerHTML=`<div>
                             <button component-click="clickHandler()">TestComponent6 Click Handler</button>
                        </div>`;
        let nodeToAppend=node.childNodes[0];
        testComponent5DomEl.appendChild(nodeToAppend);
        testComponent6 = new TestComponent(nodeToAppend,testComponent5,{componentReferenceName:"TestComponent6"});
        await setTimeout(()=>{},500);
        assert.equal(testComponent5.components["TestComponent6"].componentReferenceName, "TestComponent6");
    });
});


describe('Detect conflict in component-reference-name - using two times TestComponent6 under TestComponent5 component', function() {
    it('Not unique component reference name exception is throwed ',  function() {
        let testComponent5DomEl= document.querySelector(`[component-reference-name="TestComponent5"]`);
        var node=document.createElement('div');
        node.innerHTML=`<div component="TestComponent" component-reference-name="TestComponent6">
                        </div>`;
        let nodeToAppend=node.childNodes[0];
        testComponent5DomEl.appendChild(nodeToAppend);
        let crnException=null;
        try{
            testComponent5.loadChildComponents();
        }catch (e){
            crnException=e;
            console.log(e);
        }

        assert.equal(crnException!=null, true);
    });
});



describe('Handle event - stopping propagation across innested component-click function', function() {
    it('Stop event propagation Only the first function component-click in the hierarchy is invoked', async function() {

        let clickEventsNumberBefore=TestManager$1.getClickEvents("StopClickPropagationComponent");

        let testComponent1DomEl= document.querySelector(`[component-reference-name="TestComponent1"]`);
        var node=document.createElement('div');
        node.innerHTML=`<div component="StopClickPropagationComponent" component-reference-name="StopClickPropagationComponent">
                                <a href="javascript:void(0)" component-click="clickHandler('this')">
                                    StopClickPropagationComponent
                                    <button component-click="clickHandler('this')">StopClickPropagationComponent 2</button>
                                </a>
                        </div>`;
        testComponent1DomEl.appendChild(node);
        let loadedComponents = testComponent.loadChildComponents();
        stopClickPropagationComponent=loadedComponents[1];
        document.querySelector(`[component-reference-name="StopClickPropagationComponent"] button`).click();
        await setTimeout(()=>{},1000);
        console.log(TestManager$1.getClickEvents("StopClickPropagationComponent"));
        assert.equal(TestManager$1.getClickEvents("StopClickPropagationComponent"), (clickEventsNumberBefore+1));
    });
});

describe('Remove TestComponent2 from dom - remove the dom element that contains the component', function() {
    it('Component and theirs chilldren must be deallocated', async function() {

        let testComponent2DomEl= document.querySelector(`[component-reference-name="TestComponent2"]`);

        testComponent2DomEl.remove();
        await setTimeout(()=>{},1000);

        let allComponentsRemoved= [testComponent2,testComponent3,testComponent4,testComponent5,testComponent6].reduce((accumulator,current)=>{
            return accumulator &&  (Object.keys(current).length === 0  || !current);
        },true);

        assert.equal(allComponentsRemoved, true);
    });
});

describe('Remove TestComponent programmatically - remove the dom element and theirs children', function() {
    it('Component and theirs chilldren must be deallocated', async function() {
        testComponent.destroy();
        await setTimeout(()=>{},2000);
        let allComponentsRemoved= [testComponent,stopClickPropagationComponent].reduce((accumulator,current)=>{
            return accumulator &&  (Object.keys(current).length === 0  || !current);
        },true);

        assert.equal(allComponentsRemoved, true);
    });
});



//replace eval method in order to retrieve function parameters

//Init
//BeforComponetClick
//Lanciare eccezione se vengono trovate componentReferenceName registrate o se il componentReferenceName coincide con quella del padre

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
