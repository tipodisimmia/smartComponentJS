(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

class AppRegistry {
    constructor() {
        this.components = [];
    }


    registerComponents(componentsClasses){
        Object.keys(componentsClasses).forEach((componentClassName)=>{
            if(!this.getComponent(componentClassName)){
                this.registerComponent(componentClassName,componentsClasses[componentClassName]);
            }
        });
    }


    registerComponent(name,clazz) {
        this.components.push({
            name: name,
            clazz: clazz
        });
    }

    initComponentByName(element,componentName){
        let instance=null;
        try{
            var clazz = this.getComponent(componentName);
            instance=new clazz(element); //Start Up Component
        }catch(e){
            console.error("Error when trying to instance Component " + componentName +": "+ e);
        }
        return instance;
    }

    getComponent(name) {
        var comp = this.components.filter(c => c.name == name).map(c => c.clazz)[0];
        return comp;
    }
}

var AppRegistry$1 = new AppRegistry();

class Component {

    constructor(element, parentComponent, params) {

        this.element = element;
        this.bindedElements = {"click":[]};
        this._componentId =  this.generateUid();
        this.parentComponent = parentComponent || this;
        this.componentReferenceName = null;
        this.params = params || {};

        this.mutationObserver= new MutationObserver(this.mutationHandler.bind(this));
        this.mutationObserver.observe(element,{attributes: false, childList: true, characterData: false, subtree: true});


        if(!this.parentComponent.components){
            this.parentComponent.components={};
        }

        //Serve per recuperare il componente  tramite un nome di fantasia contenuto nell'attributo component-reference-name
        let componentReferenceName = this.params.componentReferenceName ? this.params.componentReferenceName : this.element.getAttribute("component-reference-name");
        componentReferenceName=componentReferenceName || this._componentId;

        this.parentComponent.components[componentReferenceName] = this;
        this.componentReferenceName = componentReferenceName;
        if (!element.getAttribute("component-reference-name")) {
            element.setAttribute("component-reference-name", componentReferenceName);
        }

        this.element.setAttribute("component-id",this._componentId);

        if(!this.element.getAttribute("component")){
            this.element.setAttribute("component",this.constructor.name);
        }


        if(this.element.getAttribute("component-click")){
            this.bindComponentClick(this.element);
        }

        let nodesToBind =this.getComponentClickNodeToBind([this.element]);
        if(nodesToBind.length) {
            for (var i = 0; i < nodesToBind.length; i++) {
                this.checkComponentsHierarchyAndBindClick(nodesToBind[i]);
            }
        }
    }

    generateUid() {
        return  this.constructor.name+"_"+'xxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    clickHandler(ev) {
        let functionCode = ev.currentTarget.getAttribute('component-click');
        let functionName = functionCode.split("(")[0];

        function extractParams(...params) {

            let parameters=[].slice.call(arguments);
            return parameters.map((param)=>{
                if(param=="this"){
                    return ev;
                }else{
                    return param;
                }
            })
        }

        if(this[functionName]){
            this[functionName].apply(this, eval("extractParams("+functionCode.split("(")[1]));
        }
    }

    loadChildComponents(parentComponent) {
        let componentsLoaded=[];
        var componentsEls = this.element.querySelectorAll('[component]');
        for (var i = 0; i < componentsEls.length; i++) {
            var componentId = componentsEls[i].getAttribute('component-id');

            if (!componentId) {
                var component = componentsEls[i].getAttribute('component');
                var Clazz = AppRegistry$1.getComponent(component);
                componentsLoaded.push( new Clazz(componentsEls[i],parentComponent || this));
            }
        }
        return componentsLoaded;
    }

    bindComponentClick(node) {

        let isAlreadyBinded=this.bindedElements["click"].reduce((accumulator,currentNode)=>{
            return accumulator || currentNode.isEqualNode(node);
        },false);

        if(!isAlreadyBinded){
            this.bindedElements["click"].push(node);
            node.addEventListener('click', (e)=> {
                this.clickHandler(e);
            });
        }
    }

    checkComponentsHierarchyAndBindClick(node){
        let parentsComponent= this.getDomElementParents( node, '[component-reference-name]');
        if(parentsComponent.length>0 && parentsComponent[0].getAttribute("component-reference-name")==this.componentReferenceName){
            this.bindComponentClick(node);
        }else{
            return;
        }
    }

    getDomElementParents(elem, selector){
        // Setup parents array
        var parents = [];
        // Get matching parent elements
        for ( ; elem && elem !== document; elem = elem.parentNode ) {
            // Add matching parents to array
            if (selector) {
                if (elem.matches(selector)) {
                    parents.push(elem);
                }
            } else {
                parents.push(elem);
            }
        }
        return parents;
    }


    mutationHandler(mutationsList){
        if(mutationsList && mutationsList.length>0){
            let mutationElements= mutationsList.filter((m) => {
                return m.addedNodes.length > 0;
            }).reduce((prev, current) => {
                return prev.concat(this.getComponentClickNodeToBind(current.addedNodes));
            }, []);

            if(mutationElements.length){
                for (var i = 0; i < mutationElements.length; i++) {
                    this.checkComponentsHierarchyAndBindClick(mutationElements[i]);
                }
            }
        }
    }

    getComponentClickNodeToBind(modesToCheck){
        let nodesToBind=[];
        if(modesToCheck.length){
            for (var i = 0; i < modesToCheck.length; i++) {
                let node=modesToCheck[i];
                if(node.querySelectorAll){
                    let componentClickElements =node.querySelectorAll('[component-click]');
                    if (componentClickElements.length > 0) {
                        for (let i = 0; i < componentClickElements.length; i++) {
                            nodesToBind.push(componentClickElements[i]);
                        }
                    }
                }
            }
        }
        return nodesToBind;
    }
}

class TestManager {
    constructor() {
        this.clickEventsCounter={};
    }

    getClickEvents(componentReferenceName){
        if (typeof  this.clickEventsCounter.componentReferenceName=== "undefined"){
            this.clickEventsCounter[componentReferenceName]=0;
        }
        return this.clickEventsCounter[componentReferenceName];
    }

    addClickEvent(componentReferenceName){
        if (typeof  this.clickEventsCounter.componentReferenceName === "undefined"){
            this.clickEventsCounter[componentReferenceName]=0;
        }
        this.clickEventsCounter[componentReferenceName]++;
        return this.clickEventsCounter[componentReferenceName];
    }
}

var TestManager$1 = new TestManager();

class TestComponent extends Component{

    constructor(element,parentComponent,params) {
        super(element,parentComponent,params);
    }

    clickHandler(){
        console.log(this.componentReferenceName);
        TestManager$1.addClickEvent(this.componentReferenceName);
    }

}

AppRegistry$1.registerComponents({TestComponent});

let testComponent=null;

describe('TestComponent1 - Instance by name', function() {
    testComponent = AppRegistry$1.initComponentByName(document.querySelector(`[component-reference-name="TestComponent1"]`),"TestComponent");
    it('TestComponent1 - should be instanced', function() {
        assert.equal(testComponent.constructor.name, "TestComponent");
    });
    it('TestComponent1 - should be retrieved in components object by reference name ', function() {
        assert.equal(testComponent.components["TestComponent1"].componentReferenceName, "TestComponent1");
    });
});


describe('TestComponent1 - load child components passing like parent TestComponent1', function() {
    it('TestComponent2 - TestComponent1 should be present like TestComponent2 parent', function() {
        let loadedComponents = testComponent.loadChildComponents(testComponent);
        let testComponent2=loadedComponents.filter((component)=>{
            return component.componentReferenceName=="TestComponent2";
        })[0];
        assert.equal(testComponent2.parentComponent.componentReferenceName, "TestComponent1");
    });
});

describe('TestComponent2 component-click - click on TestComponent2 child with component-click attribute', function() {
    let clickEventsNumberBefore=TestManager$1.getClickEvents("TestComponent2");
    document.querySelector(`[component-reference-name="TestComponent2"] [component-click="clickHandler()"]`).click();
        it('TestComponent2 - clickEventsNumber must be increase of one', function(done) {
            return new Promise(function (resolve) {
                setTimeout(()=>{
                    assert.equal(TestManager$1.getClickEvents("TestComponent2"), (clickEventsNumberBefore+1));
                    resolve();
                },1000);
            }).then(done);
        });
});

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdEJ1bmRsZS5qcyIsInNvdXJjZXMiOlsiLi4vYnVpbGQvU21hcnRDb21wb25lbnRKUy5qcyIsIlRlc3RNYW5hZ2VyLmpzIiwidGVzdENvbXBvbmVudHMvVGVzdENvbXBvbmVudC5qcyIsInRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQXBwUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcbiAgICB9XG5cblxuICAgIHJlZ2lzdGVyQ29tcG9uZW50cyhjb21wb25lbnRzQ2xhc3Nlcyl7XG4gICAgICAgIE9iamVjdC5rZXlzKGNvbXBvbmVudHNDbGFzc2VzKS5mb3JFYWNoKChjb21wb25lbnRDbGFzc05hbWUpPT57XG4gICAgICAgICAgICBpZighdGhpcy5nZXRDb21wb25lbnQoY29tcG9uZW50Q2xhc3NOYW1lKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckNvbXBvbmVudChjb21wb25lbnRDbGFzc05hbWUsY29tcG9uZW50c0NsYXNzZXNbY29tcG9uZW50Q2xhc3NOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgcmVnaXN0ZXJDb21wb25lbnQobmFtZSxjbGF6eikge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgY2xheno6IGNsYXp6XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRDb21wb25lbnRCeU5hbWUoZWxlbWVudCxjb21wb25lbnROYW1lKXtcbiAgICAgICAgbGV0IGluc3RhbmNlPW51bGw7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHZhciBjbGF6eiA9IHRoaXMuZ2V0Q29tcG9uZW50KGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgaW5zdGFuY2U9bmV3IGNsYXp6KGVsZW1lbnQpOyAvL1N0YXJ0IFVwIENvbXBvbmVudFxuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hlbiB0cnlpbmcgdG8gaW5zdGFuY2UgQ29tcG9uZW50IFwiICsgY29tcG9uZW50TmFtZSArXCI6IFwiKyBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgZ2V0Q29tcG9uZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmNvbXBvbmVudHMuZmlsdGVyKGMgPT4gYy5uYW1lID09IG5hbWUpLm1hcChjID0+IGMuY2xhenopWzBdO1xuICAgICAgICByZXR1cm4gY29tcDtcbiAgICB9XG59XG5cbnZhciBBcHBSZWdpc3RyeSQxID0gbmV3IEFwcFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIENvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBwYXJlbnRDb21wb25lbnQsIHBhcmFtcykge1xuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYmluZGVkRWxlbWVudHMgPSB7XCJjbGlja1wiOltdfTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SWQgPSAgdGhpcy5nZW5lcmF0ZVVpZCgpO1xuICAgICAgICB0aGlzLnBhcmVudENvbXBvbmVudCA9IHBhcmVudENvbXBvbmVudCB8fCB0aGlzO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZU5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcblxuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXI9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMubXV0YXRpb25IYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LHthdHRyaWJ1dGVzOiBmYWxzZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTogdHJ1ZX0pO1xuXG5cbiAgICAgICAgaWYoIXRoaXMucGFyZW50Q29tcG9uZW50LmNvbXBvbmVudHMpe1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRDb21wb25lbnQuY29tcG9uZW50cz17fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vU2VydmUgcGVyIHJlY3VwZXJhcmUgaWwgY29tcG9uZW50ZSAgdHJhbWl0ZSB1biBub21lIGRpIGZhbnRhc2lhIGNvbnRlbnV0byBuZWxsJ2F0dHJpYnV0byBjb21wb25lbnQtcmVmZXJlbmNlLW5hbWVcbiAgICAgICAgbGV0IGNvbXBvbmVudFJlZmVyZW5jZU5hbWUgPSB0aGlzLnBhcmFtcy5jb21wb25lbnRSZWZlcmVuY2VOYW1lID8gdGhpcy5wYXJhbXMuY29tcG9uZW50UmVmZXJlbmNlTmFtZSA6IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjb21wb25lbnQtcmVmZXJlbmNlLW5hbWVcIik7XG4gICAgICAgIGNvbXBvbmVudFJlZmVyZW5jZU5hbWU9Y29tcG9uZW50UmVmZXJlbmNlTmFtZSB8fCB0aGlzLl9jb21wb25lbnRJZDtcblxuICAgICAgICB0aGlzLnBhcmVudENvbXBvbmVudC5jb21wb25lbnRzW2NvbXBvbmVudFJlZmVyZW5jZU5hbWVdID0gdGhpcztcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2VOYW1lID0gY29tcG9uZW50UmVmZXJlbmNlTmFtZTtcbiAgICAgICAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZShcImNvbXBvbmVudC1yZWZlcmVuY2UtbmFtZVwiKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb21wb25lbnQtcmVmZXJlbmNlLW5hbWVcIiwgY29tcG9uZW50UmVmZXJlbmNlTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29tcG9uZW50LWlkXCIsdGhpcy5fY29tcG9uZW50SWQpO1xuXG4gICAgICAgIGlmKCF0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY29tcG9uZW50XCIpKXtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb21wb25lbnRcIix0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZih0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY29tcG9uZW50LWNsaWNrXCIpKXtcbiAgICAgICAgICAgIHRoaXMuYmluZENvbXBvbmVudENsaWNrKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm9kZXNUb0JpbmQgPXRoaXMuZ2V0Q29tcG9uZW50Q2xpY2tOb2RlVG9CaW5kKFt0aGlzLmVsZW1lbnRdKTtcbiAgICAgICAgaWYobm9kZXNUb0JpbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzVG9CaW5kLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0NvbXBvbmVudHNIaWVyYXJjaHlBbmRCaW5kQ2xpY2sobm9kZXNUb0JpbmRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVVaWQoKSB7XG4gICAgICAgIHJldHVybiAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiX1wiKyd4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLFxuICAgICAgICAgICAgICAgIHYgPSBjID09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsaWNrSGFuZGxlcihldikge1xuICAgICAgICBsZXQgZnVuY3Rpb25Db2RlID0gZXYuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2NvbXBvbmVudC1jbGljaycpO1xuICAgICAgICBsZXQgZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25Db2RlLnNwbGl0KFwiKFwiKVswXTtcblxuICAgICAgICBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKC4uLnBhcmFtcykge1xuXG4gICAgICAgICAgICBsZXQgcGFyYW1ldGVycz1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5tYXAoKHBhcmFtKT0+e1xuICAgICAgICAgICAgICAgIGlmKHBhcmFtPT1cInRoaXNcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldjtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzW2Z1bmN0aW9uTmFtZV0pe1xuICAgICAgICAgICAgdGhpc1tmdW5jdGlvbk5hbWVdLmFwcGx5KHRoaXMsIGV2YWwoXCJleHRyYWN0UGFyYW1zKFwiK2Z1bmN0aW9uQ29kZS5zcGxpdChcIihcIilbMV0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRDaGlsZENvbXBvbmVudHMocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICAgIGxldCBjb21wb25lbnRzTG9hZGVkPVtdO1xuICAgICAgICB2YXIgY29tcG9uZW50c0VscyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbY29tcG9uZW50XScpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudHNFbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRJZCA9IGNvbXBvbmVudHNFbHNbaV0uZ2V0QXR0cmlidXRlKCdjb21wb25lbnQtaWQnKTtcblxuICAgICAgICAgICAgaWYgKCFjb21wb25lbnRJZCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBjb21wb25lbnRzRWxzW2ldLmdldEF0dHJpYnV0ZSgnY29tcG9uZW50Jyk7XG4gICAgICAgICAgICAgICAgdmFyIENsYXp6ID0gQXBwUmVnaXN0cnkkMS5nZXRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzTG9hZGVkLnB1c2goIG5ldyBDbGF6eihjb21wb25lbnRzRWxzW2ldLHBhcmVudENvbXBvbmVudCB8fCB0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNMb2FkZWQ7XG4gICAgfVxuXG4gICAgYmluZENvbXBvbmVudENsaWNrKG5vZGUpIHtcblxuICAgICAgICBsZXQgaXNBbHJlYWR5QmluZGVkPXRoaXMuYmluZGVkRWxlbWVudHNbXCJjbGlja1wiXS5yZWR1Y2UoKGFjY3VtdWxhdG9yLGN1cnJlbnROb2RlKT0+e1xuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yIHx8IGN1cnJlbnROb2RlLmlzRXF1YWxOb2RlKG5vZGUpO1xuICAgICAgICB9LGZhbHNlKTtcblxuICAgICAgICBpZighaXNBbHJlYWR5QmluZGVkKXtcbiAgICAgICAgICAgIHRoaXMuYmluZGVkRWxlbWVudHNbXCJjbGlja1wiXS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tDb21wb25lbnRzSGllcmFyY2h5QW5kQmluZENsaWNrKG5vZGUpe1xuICAgICAgICBsZXQgcGFyZW50c0NvbXBvbmVudD0gdGhpcy5nZXREb21FbGVtZW50UGFyZW50cyggbm9kZSwgJ1tjb21wb25lbnQtcmVmZXJlbmNlLW5hbWVdJyk7XG4gICAgICAgIGlmKHBhcmVudHNDb21wb25lbnQubGVuZ3RoPjAgJiYgcGFyZW50c0NvbXBvbmVudFswXS5nZXRBdHRyaWJ1dGUoXCJjb21wb25lbnQtcmVmZXJlbmNlLW5hbWVcIik9PXRoaXMuY29tcG9uZW50UmVmZXJlbmNlTmFtZSl7XG4gICAgICAgICAgICB0aGlzLmJpbmRDb21wb25lbnRDbGljayhub2RlKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREb21FbGVtZW50UGFyZW50cyhlbGVtLCBzZWxlY3Rvcil7XG4gICAgICAgIC8vIFNldHVwIHBhcmVudHMgYXJyYXlcbiAgICAgICAgdmFyIHBhcmVudHMgPSBbXTtcbiAgICAgICAgLy8gR2V0IG1hdGNoaW5nIHBhcmVudCBlbGVtZW50c1xuICAgICAgICBmb3IgKCA7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQ7IGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSB7XG4gICAgICAgICAgICAvLyBBZGQgbWF0Y2hpbmcgcGFyZW50cyB0byBhcnJheVxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH1cblxuXG4gICAgbXV0YXRpb25IYW5kbGVyKG11dGF0aW9uc0xpc3Qpe1xuICAgICAgICBpZihtdXRhdGlvbnNMaXN0ICYmIG11dGF0aW9uc0xpc3QubGVuZ3RoPjApe1xuICAgICAgICAgICAgbGV0IG11dGF0aW9uRWxlbWVudHM9IG11dGF0aW9uc0xpc3QuZmlsdGVyKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0uYWRkZWROb2Rlcy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfSkucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXYuY29uY2F0KHRoaXMuZ2V0Q29tcG9uZW50Q2xpY2tOb2RlVG9CaW5kKGN1cnJlbnQuYWRkZWROb2RlcykpO1xuICAgICAgICAgICAgfSwgW10pO1xuXG4gICAgICAgICAgICBpZihtdXRhdGlvbkVsZW1lbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbkVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb21wb25lbnRzSGllcmFyY2h5QW5kQmluZENsaWNrKG11dGF0aW9uRWxlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENvbXBvbmVudENsaWNrTm9kZVRvQmluZChtb2Rlc1RvQ2hlY2spe1xuICAgICAgICBsZXQgbm9kZXNUb0JpbmQ9W107XG4gICAgICAgIGlmKG1vZGVzVG9DaGVjay5sZW5ndGgpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2Rlc1RvQ2hlY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZT1tb2Rlc1RvQ2hlY2tbaV07XG4gICAgICAgICAgICAgICAgaWYobm9kZS5xdWVyeVNlbGVjdG9yQWxsKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudENsaWNrRWxlbWVudHMgPW5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2NvbXBvbmVudC1jbGlja10nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudENsaWNrRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRDbGlja0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0JpbmQucHVzaChjb21wb25lbnRDbGlja0VsZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXNUb0JpbmQ7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBcHBSZWdpc3RyeSQxIGFzIEFwcFJlZ2lzdHJ5LCBDb21wb25lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVTIxaGNuUkRiMjF3YjI1bGJuUktVeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwwRndjRkpsWjJsemRISjVMbXB6SWl3aUxpNHZjM0pqTDBOdmJYQnZibVZ1ZEM1cWN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjYm1Oc1lYTnpJRUZ3Y0ZKbFoybHpkSEo1SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyMXdiMjVsYm5SeklEMGdXMTA3WEc0Z0lDQWdmVnh1WEc1Y2JpQWdJQ0J5WldkcGMzUmxja052YlhCdmJtVnVkSE1vWTI5dGNHOXVaVzUwYzBOc1lYTnpaWE1wZTF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aGpiMjF3YjI1bGJuUnpRMnhoYzNObGN5a3VabTl5UldGamFDZ29ZMjl0Y0c5dVpXNTBRMnhoYzNOT1lXMWxLVDArZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSVhSb2FYTXVaMlYwUTI5dGNHOXVaVzUwS0dOdmJYQnZibVZ1ZEVOc1lYTnpUbUZ0WlNrcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WbmFYTjBaWEpEYjIxd2IyNWxiblFvWTI5dGNHOXVaVzUwUTJ4aGMzTk9ZVzFsTEdOdmJYQnZibVZ1ZEhORGJHRnpjMlZ6VzJOdmJYQnZibVZ1ZEVOc1lYTnpUbUZ0WlYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ2NtVm5hWE4wWlhKRGIyMXdiMjVsYm5Rb2JtRnRaU3hqYkdGNmVpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRITXVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQnVZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoZW5vNklHTnNZWHA2WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsdWFYUkRiMjF3YjI1bGJuUkNlVTVoYldVb1pXeGxiV1Z1ZEN4amIyMXdiMjVsYm5ST1lXMWxLWHRjYmlBZ0lDQWdJQ0FnYkdWMElHbHVjM1JoYm1ObFBXNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSeWVYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiR0Y2ZWlBOUlIUm9hWE11WjJWMFEyOXRjRzl1Wlc1MEtHTnZiWEJ2Ym1WdWRFNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVTlibVYzSUdOc1lYcDZLR1ZzWlcxbGJuUXBPeUF2TDFOMFlYSjBJRlZ3SUVOdmJYQnZibVZ1ZEZ4dUlDQWdJQ0FnSUNCOVkyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtGd2lSWEp5YjNJZ2QyaGxiaUIwY25scGJtY2dkRzhnYVc1emRHRnVZMlVnUTI5dGNHOXVaVzUwSUZ3aUlDc2dZMjl0Y0c5dVpXNTBUbUZ0WlNBclhDSTZJRndpS3lCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzV6ZEdGdVkyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBRMjl0Y0c5dVpXNTBLRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmJYQWdQU0IwYUdsekxtTnZiWEJ2Ym1WdWRITXVabWxzZEdWeUtHTWdQVDRnWXk1dVlXMWxJRDA5SUc1aGJXVXBMbTFoY0NoaklEMCtJR011WTJ4aGVub3BXekJkTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dGNEdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzVsZHlCQmNIQlNaV2RwYzNSeWVTZ3BPMXh1SWl3aWFXMXdiM0owSUVGd2NGSmxaMmx6ZEhKNUlHWnliMjBnSnk0dlFYQndVbVZuYVhOMGNua25PMXh1WEc1amJHRnpjeUJEYjIxd2IyNWxiblFnZTF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZEN3Z2NHRnlaVzUwUTI5dGNHOXVaVzUwTENCd1lYSmhiWE1wSUh0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUpwYm1SbFpFVnNaVzFsYm5SeklEMGdlMXdpWTJ4cFkydGNJanBiWFgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOdmJYQnZibVZ1ZEVsa0lEMGdJSFJvYVhNdVoyVnVaWEpoZEdWVmFXUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWEpsYm5SRGIyMXdiMjVsYm5RZ1BTQndZWEpsYm5SRGIyMXdiMjVsYm5RZ2ZId2dkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxd2IyNWxiblJTWldabGNtVnVZMlZPWVcxbElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhKaGJYTWdQU0J3WVhKaGJYTWdmSHdnZTMwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1dGRYUmhkR2x2Yms5aWMyVnlkbVZ5UFNCdVpYY2dUWFYwWVhScGIyNVBZbk5sY25abGNpaDBhR2x6TG0xMWRHRjBhVzl1U0dGdVpHeGxjaTVpYVc1a0tIUm9hWE1wS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0ZFhSaGRHbHZiazlpYzJWeWRtVnlMbTlpYzJWeWRtVW9aV3hsYldWdWRDeDdZWFIwY21saWRYUmxjem9nWm1Gc2MyVXNJR05vYVd4a1RHbHpkRG9nZEhKMVpTd2dZMmhoY21GamRHVnlSR0YwWVRvZ1ptRnNjMlVzSUhOMVluUnlaV1U2SUhSeWRXVjlLVHRjYmx4dVhHNGdJQ0FnSUNBZ0lHbG1LQ0YwYUdsekxuQmhjbVZ1ZEVOdmJYQnZibVZ1ZEM1amIyMXdiMjVsYm5SektYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5Wlc1MFEyOXRjRzl1Wlc1MExtTnZiWEJ2Ym1WdWRITTllMzA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMMU5sY25abElIQmxjaUJ5WldOMWNHVnlZWEpsSUdsc0lHTnZiWEJ2Ym1WdWRHVWdJSFJ5WVcxcGRHVWdkVzRnYm05dFpTQmthU0JtWVc1MFlYTnBZU0JqYjI1MFpXNTFkRzhnYm1Wc2JDZGhkSFJ5YVdKMWRHOGdZMjl0Y0c5dVpXNTBMWEpsWm1WeVpXNWpaUzF1WVcxbFhHNGdJQ0FnSUNBZ0lHeGxkQ0JqYjIxd2IyNWxiblJTWldabGNtVnVZMlZPWVcxbElEMGdkR2hwY3k1d1lYSmhiWE11WTI5dGNHOXVaVzUwVW1WbVpYSmxibU5sVG1GdFpTQS9JSFJvYVhNdWNHRnlZVzF6TG1OdmJYQnZibVZ1ZEZKbFptVnlaVzVqWlU1aGJXVWdPaUIwYUdsekxtVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLRndpWTI5dGNHOXVaVzUwTFhKbFptVnlaVzVqWlMxdVlXMWxYQ0lwTzF4dUlDQWdJQ0FnSUNCamIyMXdiMjVsYm5SU1pXWmxjbVZ1WTJWT1lXMWxQV052YlhCdmJtVnVkRkpsWm1WeVpXNWpaVTVoYldVZ2ZId2dkR2hwY3k1ZlkyOXRjRzl1Wlc1MFNXUTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWEpsYm5SRGIyMXdiMjVsYm5RdVkyOXRjRzl1Wlc1MGMxdGpiMjF3YjI1bGJuUlNaV1psY21WdVkyVk9ZVzFsWFNBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl0Y0c5dVpXNTBVbVZtWlhKbGJtTmxUbUZ0WlNBOUlHTnZiWEJ2Ym1WdWRGSmxabVZ5Wlc1alpVNWhiV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haV3hsYldWdWRDNW5aWFJCZEhSeWFXSjFkR1VvWENKamIyMXdiMjVsYm5RdGNtVm1aWEpsYm1ObExXNWhiV1ZjSWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtGd2lZMjl0Y0c5dVpXNTBMWEpsWm1WeVpXNWpaUzF1WVcxbFhDSXNJR052YlhCdmJtVnVkRkpsWm1WeVpXNWpaVTVoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2hjSW1OdmJYQnZibVZ1ZEMxcFpGd2lMSFJvYVhNdVgyTnZiWEJ2Ym1WdWRFbGtLVHRjYmx4dUlDQWdJQ0FnSUNCcFppZ2hkR2hwY3k1bGJHVnRaVzUwTG1kbGRFRjBkSEpwWW5WMFpTaGNJbU52YlhCdmJtVnVkRndpS1NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLRndpWTI5dGNHOXVaVzUwWENJc2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1dVlXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNWNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NWxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2hjSW1OdmJYQnZibVZ1ZEMxamJHbGphMXdpS1NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtSnBibVJEYjIxd2IyNWxiblJEYkdsamF5aDBhR2x6TG1Wc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiR1YwSUc1dlpHVnpWRzlDYVc1a0lEMTBhR2x6TG1kbGRFTnZiWEJ2Ym1WdWRFTnNhV05yVG05a1pWUnZRbWx1WkNoYmRHaHBjeTVsYkdWdFpXNTBYU2s3WEc0Z0lDQWdJQ0FnSUdsbUtHNXZaR1Z6Vkc5Q2FXNWtMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnViMlJsYzFSdlFtbHVaQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJobFkydERiMjF3YjI1bGJuUnpTR2xsY21GeVkyaDVRVzVrUW1sdVpFTnNhV05yS0c1dlpHVnpWRzlDYVc1a1cybGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHZGxibVZ5WVhSbFZXbGtLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1Ym1GdFpTdGNJbDljSWlzbmVIaDRlSGg0ZUhnbkxuSmxjR3hoWTJVb0wxdDRlVjB2Wnl3Z1puVnVZM1JwYjI0Z0tHTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5SUQwZ1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFMklId2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IySUQwZ1l5QTlQU0FuZUNjZ1B5QnlJRG9nS0hJZ0ppQXdlRE1nZkNBd2VEZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhZdWRHOVRkSEpwYm1jb01UWXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYkdsamEwaGhibVJzWlhJb1pYWXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHWjFibU4wYVc5dVEyOWtaU0E5SUdWMkxtTjFjbkpsYm5SVVlYSm5aWFF1WjJWMFFYUjBjbWxpZFhSbEtDZGpiMjF3YjI1bGJuUXRZMnhwWTJzbktUdGNiaUFnSUNBZ0lDQWdiR1YwSUdaMWJtTjBhVzl1VG1GdFpTQTlJR1oxYm1OMGFXOXVRMjlrWlM1emNHeHBkQ2hjSWloY0lpbGJNRjA3WEc1Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1pYaDBjbUZqZEZCaGNtRnRjeWd1TGk1d1lYSmhiWE1wSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQmhjbUZ0WlhSbGNuTTlXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJoY21GdFpYUmxjbk11YldGd0tDaHdZWEpoYlNrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWh3WVhKaGJUMDlYQ0owYUdselhDSXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZXVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYSmhiVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWW9kR2hwYzF0bWRXNWpkR2x2Yms1aGJXVmRLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iWm5WdVkzUnBiMjVPWVcxbFhTNWhjSEJzZVNoMGFHbHpMQ0JsZG1Gc0tGd2laWGgwY21GamRGQmhjbUZ0Y3loY0lpdG1kVzVqZEdsdmJrTnZaR1V1YzNCc2FYUW9YQ0lvWENJcFd6RmRLU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR3h2WVdSRGFHbHNaRU52YlhCdmJtVnVkSE1vY0dGeVpXNTBRMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMjF3YjI1bGJuUnpURzloWkdWa1BWdGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyOXRjRzl1Wlc1MGMwVnNjeUE5SUhSb2FYTXVaV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZGJZMjl0Y0c5dVpXNTBYU2NwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTnZiWEJ2Ym1WdWRITkZiSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUkpaQ0E5SUdOdmJYQnZibVZ1ZEhORmJITmJhVjB1WjJWMFFYUjBjbWxpZFhSbEtDZGpiMjF3YjI1bGJuUXRhV1FuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmpiMjF3YjI1bGJuUkpaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUWdQU0JqYjIxd2IyNWxiblJ6Uld4elcybGRMbWRsZEVGMGRISnBZblYwWlNnblkyOXRjRzl1Wlc1MEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUVOc1lYcDZJRDBnUVhCd1VtVm5hWE4wY25rdVoyVjBRMjl0Y0c5dVpXNTBLR052YlhCdmJtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGNHOXVaVzUwYzB4dllXUmxaQzV3ZFhOb0tDQnVaWGNnUTJ4aGVub29ZMjl0Y0c5dVpXNTBjMFZzYzF0cFhTeHdZWEpsYm5SRGIyMXdiMjVsYm5RZ2ZId2dkR2hwY3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyMXdiMjVsYm5SelRHOWhaR1ZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0pwYm1SRGIyMXdiMjVsYm5SRGJHbGpheWh1YjJSbEtTQjdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHbHpRV3h5WldGa2VVSnBibVJsWkQxMGFHbHpMbUpwYm1SbFpFVnNaVzFsYm5Selcxd2lZMnhwWTJ0Y0lsMHVjbVZrZFdObEtDaGhZMk4xYlhWc1lYUnZjaXhqZFhKeVpXNTBUbTlrWlNrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJOMWJYVnNZWFJ2Y2lCOGZDQmpkWEp5Wlc1MFRtOWtaUzVwYzBWeGRXRnNUbTlrWlNodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnZlN4bVlXeHpaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWW9JV2x6UVd4eVpXRmtlVUpwYm1SbFpDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUpwYm1SbFpFVnNaVzFsYm5Selcxd2lZMnhwWTJ0Y0lsMHVjSFZ6YUNodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvWlNrOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHbGphMGhoYm1Sc1pYSW9aU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMmhsWTJ0RGIyMXdiMjVsYm5SelNHbGxjbUZ5WTJoNVFXNWtRbWx1WkVOc2FXTnJLRzV2WkdVcGUxeHVJQ0FnSUNBZ0lDQnNaWFFnY0dGeVpXNTBjME52YlhCdmJtVnVkRDBnZEdocGN5NW5aWFJFYjIxRmJHVnRaVzUwVUdGeVpXNTBjeWdnYm05a1pTd2dKMXRqYjIxd2IyNWxiblF0Y21WbVpYSmxibU5sTFc1aGJXVmRKeWs3WEc0Z0lDQWdJQ0FnSUdsbUtIQmhjbVZ1ZEhORGIyMXdiMjVsYm5RdWJHVnVaM1JvUGpBZ0ppWWdjR0Z5Wlc1MGMwTnZiWEJ2Ym1WdWRGc3dYUzVuWlhSQmRIUnlhV0oxZEdVb1hDSmpiMjF3YjI1bGJuUXRjbVZtWlhKbGJtTmxMVzVoYldWY0lpazlQWFJvYVhNdVkyOXRjRzl1Wlc1MFVtVm1aWEpsYm1ObFRtRnRaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KcGJtUkRiMjF3YjI1bGJuUkRiR2xqYXlodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnZldWc2MyVjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhSRWIyMUZiR1Z0Wlc1MFVHRnlaVzUwY3lobGJHVnRMQ0J6Wld4bFkzUnZjaWw3WEc0Z0lDQWdJQ0FnSUM4dklGTmxkSFZ3SUhCaGNtVnVkSE1nWVhKeVlYbGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtVnVkSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdMeThnUjJWMElHMWhkR05vYVc1bklIQmhjbVZ1ZENCbGJHVnRaVzUwYzF4dUlDQWdJQ0FnSUNCbWIzSWdLQ0E3SUdWc1pXMGdKaVlnWld4bGJTQWhQVDBnWkc5amRXMWxiblE3SUdWc1pXMGdQU0JsYkdWdExuQmhjbVZ1ZEU1dlpHVWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2JXRjBZMmhwYm1jZ2NHRnlaVzUwY3lCMGJ5QmhjbkpoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hObGJHVmpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcwdWJXRjBZMmhsY3loelpXeGxZM1J2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVpXNTBjeTV3ZFhOb0tHVnNaVzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MGN5NXdkWE5vS0dWc1pXMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWEpsYm5Sek8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ2JYVjBZWFJwYjI1SVlXNWtiR1Z5S0cxMWRHRjBhVzl1YzB4cGMzUXBlMXh1SUNBZ0lDQWdJQ0JwWmlodGRYUmhkR2x2Ym5OTWFYTjBJQ1ltSUcxMWRHRjBhVzl1YzB4cGMzUXViR1Z1WjNSb1BqQXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzExZEdGMGFXOXVSV3hsYldWdWRITTlJRzExZEdGMGFXOXVjMHhwYzNRdVptbHNkR1Z5S0NodEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzB1WVdSa1pXUk9iMlJsY3k1c1pXNW5kR2dnUGlBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrdWNtVmtkV05sS0Nod2NtVjJMQ0JqZFhKeVpXNTBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpYWXVZMjl1WTJGMEtIUm9hWE11WjJWMFEyOXRjRzl1Wlc1MFEyeHBZMnRPYjJSbFZHOUNhVzVrS0dOMWNuSmxiblF1WVdSa1pXUk9iMlJsY3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z1cxMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWh0ZFhSaGRHbHZia1ZzWlcxbGJuUnpMbXhsYm1kMGFDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J0ZFhSaGRHbHZia1ZzWlcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyaGxZMnREYjIxd2IyNWxiblJ6U0dsbGNtRnlZMmg1UVc1a1FtbHVaRU5zYVdOcktHMTFkR0YwYVc5dVJXeGxiV1Z1ZEhOYmFWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHZGxkRU52YlhCdmJtVnVkRU5zYVdOclRtOWtaVlJ2UW1sdVpDaHRiMlJsYzFSdlEyaGxZMnNwZTF4dUlDQWdJQ0FnSUNCc1pYUWdibTlrWlhOVWIwSnBibVE5VzEwN1hHNGdJQ0FnSUNBZ0lHbG1LRzF2WkdWelZHOURhR1ZqYXk1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J0YjJSbGMxUnZRMmhsWTJzdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtOWtaVDF0YjJSbGMxUnZRMmhsWTJ0YmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvYm05a1pTNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZiWEJ2Ym1WdWRFTnNhV05yUld4bGJXVnVkSE1nUFc1dlpHVXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMk52YlhCdmJtVnVkQzFqYkdsamExMG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052YlhCdmJtVnVkRU5zYVdOclJXeGxiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JqYjIxd2IyNWxiblJEYkdsamEwVnNaVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaWE5VYjBKcGJtUXVjSFZ6YUNoamIyMXdiMjVsYm5SRGJHbGphMFZzWlcxbGJuUnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibTlrWlhOVWIwSnBibVE3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENBZ1EyOXRjRzl1Wlc1ME95SmRMQ0p1WVcxbGN5STZXeUpCY0hCU1pXZHBjM1J5ZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1RVRkJUU3hYUVVGWExFTkJRVU03U1VGRFpDeFhRVUZYTEVkQlFVYzdVVUZEVml4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFVkJRVVVzUTBGQlF6dExRVU40UWpzN08wbEJSMFFzYTBKQlFXdENMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdVVUZEYWtNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEd0Q1FVRnJRaXhIUVVGSE8xbEJRM3BFTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1owSkJRM1JETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVOQlFVTTdZVUZEY0VZN1UwRkRTaXhGUVVGRE8wdEJRMHc3T3p0SlFVZEVMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1VVRkRNVUlzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRha0lzU1VGQlNTeEZRVUZGTEVsQlFVazdXVUZEVml4TFFVRkxMRVZCUVVVc1MwRkJTenRUUVVObUxFTkJRVU1zUTBGQlF6dExRVU5PT3p0SlFVVkVMRzFDUVVGdFFpeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJ4Q0xFZEJRVWM3V1VGRFF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFsQlF6ZERMRkZCUVZFc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTXZRaXhOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU5NTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc01FTkJRVEJETEVkQlFVY3NZVUZCWVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU4wUmp0UlFVTkVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wdEJRMjVDT3p0SlFVVkVMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVU3VVVGRFppeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTFSU3hQUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tTzBOQlEwbzdPMEZCUlVRc2IwSkJRV1VzU1VGQlNTeFhRVUZYTEVWQlFVVXNRMEZCUXpzN1FVTjBRMnBETEUxQlFVMHNVMEZCVXl4RFFVRkRPenRKUVVWYUxGZEJRVmNzUTBGQlF5eFBRVUZQTEVWQlFVVXNaVUZCWlN4RlFVRkZMRTFCUVUwc1JVRkJSVHM3VVVGRk1VTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU03VVVGRGRrSXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnVReXhKUVVGSkxFTkJRVU1zV1VGQldTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRSUVVONFF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMR1ZCUVdVc1NVRkJTU3hKUVVGSkxFTkJRVU03VVVGREwwTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVTnVReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNTVUZCU1N4RlFVRkZMRU5CUVVNN08xRkJSVE5DTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE4wVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1lVRkJZU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenM3TzFGQlIycElMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXp0WlFVTm9ReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNN1UwRkRkRU03T3p0UlFVZEVMRWxCUVVrc2MwSkJRWE5DTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh6UWtGQmMwSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFTkJRVU03VVVGRE4wb3NjMEpCUVhOQ0xFTkJRVU1zYzBKQlFYTkNMRWxCUVVrc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF6czdVVUZGYmtVc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFZRVUZWTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZETDBRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMSE5DUVVGelFpeERRVUZETzFGQlEzSkVMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFVkJRVVU3V1VGRGJrUXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXd3UWtGQk1FSXNSVUZCUlN4elFrRkJjMElzUTBGQlF5eERRVUZETzFOQlF6VkZPenRSUVVWRUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdPMUZCUlRWRUxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFpRVU4yUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFRRVU5vUlRzN08xRkJSMFFzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMWxCUXpWRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVMEZEZWtNN08xRkJSVVFzU1VGQlNTeFhRVUZYTEVWQlFVVXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGJFVXNSMEZCUnl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRk8xbEJRMjVDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU42UXl4SlFVRkpMRU5CUVVNc2IwTkJRVzlETEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE4wUTdVMEZEU2p0TFFVTktPenRKUVVWRUxGZEJRVmNzUjBGQlJ6dFJRVU5XTEZGQlFWRXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUTBGQlF5eEZRVUZGTzFsQlEzWkZMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJRenRuUWtGRE1VSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGRrTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEzcENMRU5CUVVNc1EwRkJRenRMUVVOT096dEpRVVZFTEZsQlFWa3NRMEZCUXl4RlFVRkZMRVZCUVVVN1VVRkRZaXhKUVVGSkxGbEJRVmtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMUZCUTNCRkxFbEJRVWtzV1VGQldTeEhRVUZITEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdPMUZCUlRsRExGTkJRVk1zWVVGQllTeERRVUZETEVkQlFVY3NUVUZCVFN4RlFVRkZPenRaUVVVNVFpeEpRVUZKTEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTjRReXhQUVVGUExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRWRCUVVjN1owSkJRek5DTEVkQlFVY3NTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJRenR2UWtGRFlpeFBRVUZQTEVWQlFVVXNRMEZCUXp0cFFrRkRZaXhKUVVGSk8yOUNRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkRPMmxDUVVOb1FqdGhRVU5LTEVOQlFVTTdVMEZEVERzN1VVRkZSQ3hIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0WlFVTnNRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRE8xTkJRM0JHTzB0QlEwbzdPMGxCUlVRc2JVSkJRVzFDTEVOQlFVTXNaVUZCWlN4RlFVRkZPMUZCUTJwRExFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1JVRkJSU3hEUVVGRE8xRkJRM2hDTEVsQlFVa3NZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03VVVGRGFrVXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEdGQlFXRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRE0wTXNTVUZCU1N4WFFVRlhMRWRCUVVjc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenM3V1VGRmFFVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRuUWtGRFpDeEpRVUZKTEZOQlFWTXNSMEZCUnl4aFFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMmRDUVVNelJDeEpRVUZKTEV0QlFVc3NSMEZCUjBFc1lVRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0blFrRkRhRVFzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhsUVVGbExFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTXZSVHRUUVVOS08xRkJRMFFzVDBGQlR5eG5Ra0ZCWjBJc1EwRkJRenRMUVVNelFqczdTVUZGUkN4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVWQlFVVTdPMUZCUlhKQ0xFbEJRVWtzWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMRmRCUVZjc1IwRkJSenRaUVVNdlJTeFBRVUZQTEZkQlFWY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEzWkVMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03TzFGQlJWUXNSMEZCUnl4RFFVRkRMR1ZCUVdVc1EwRkJRenRaUVVOb1FpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTjRReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTzJkQ1FVTnFReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNSVUZCUXp0aFFVTjJRaXhEUVVGRExFTkJRVU03VTBGRFRqdExRVU5LT3p0SlFVVkVMRzlEUVVGdlF5eERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjBReXhKUVVGSkxHZENRVUZuUWl4RlFVRkZMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4SlFVRkpMRVZCUVVVc05FSkJRVFJDTEVOQlFVTXNRMEZCUXp0UlFVTnlSaXhIUVVGSExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRE8xbEJRM1JJTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTnFReXhKUVVGSk8xbEJRMFFzVDBGQlR6dFRRVU5XTzB0QlEwbzdPMGxCUlVRc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJRenM3VVVGRmFFTXNTVUZCU1N4UFFVRlBMRWRCUVVjc1JVRkJSU3hEUVVGRE96dFJRVVZxUWl4UlFVRlJMRWxCUVVrc1NVRkJTU3hKUVVGSkxFdEJRVXNzVVVGQlVTeEZRVUZGTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSE96dFpRVVY0UkN4SlFVRkpMRkZCUVZFc1JVRkJSVHRuUWtGRFZpeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3YjBKQlEzaENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdhVUpCUTNSQ08yRkJRMG9zVFVGQlRUdG5Ra0ZEU0N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEzUkNPMU5CUTBvN1VVRkRSQ3hQUVVGUExFOUJRVThzUTBGQlF6dExRVU5zUWpzN08wbEJSMFFzWlVGQlpTeERRVUZETEdGQlFXRXNRMEZCUXp0UlFVTXhRaXhIUVVGSExHRkJRV0VzU1VGQlNTeGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlF5eEpRVUZKTEdkQ1FVRm5RaXhGUVVGRkxHRkJRV0VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzN1owSkJRemxETEU5QlFVOHNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzJGQlEyeERMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4TFFVRkxPMmRDUVVONlFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExESkNRVUV5UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6VkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03TzFsQlJWQXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVOQlFVTTdaMEpCUTNaQ0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3YjBKQlF6bERMRWxCUVVrc1EwRkJReXh2UTBGQmIwTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmxDUVVOc1JUdGhRVU5LTzFOQlEwbzdTMEZEU2pzN1NVRkZSQ3d5UWtGQk1rSXNRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkRja01zU1VGQlNTeFhRVUZYTEVOQlFVTXNSVUZCUlN4RFFVRkRPMUZCUTI1Q0xFZEJRVWNzV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTnVRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRNVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU42UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0dlFrRkRja0lzU1VGQlNTeHpRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0dlFrRkRka1VzU1VGQlNTeHpRa0ZCYzBJc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzNkQ1FVTnVReXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc2MwSkJRWE5DTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk96UkNRVU53UkN4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03ZVVKQlF5OURPM0ZDUVVOS08ybENRVU5LTzJGQlEwbzdVMEZEU2p0UlFVTkVMRTlCUVU4c1YwRkJWeXhEUVVGRE8wdEJRM1JDTzBOQlEwbzdPenM3SW4wPVxuIiwiXG5jbGFzcyBUZXN0TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2xpY2tFdmVudHNDb3VudGVyPXt9XG4gICAgfVxuXG4gICAgZ2V0Q2xpY2tFdmVudHMoY29tcG9uZW50UmVmZXJlbmNlTmFtZSl7XG4gICAgICAgIGlmICh0eXBlb2YgIHRoaXMuY2xpY2tFdmVudHNDb3VudGVyLmNvbXBvbmVudFJlZmVyZW5jZU5hbWU9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICB0aGlzLmNsaWNrRXZlbnRzQ291bnRlcltjb21wb25lbnRSZWZlcmVuY2VOYW1lXT0wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWNrRXZlbnRzQ291bnRlcltjb21wb25lbnRSZWZlcmVuY2VOYW1lXTtcbiAgICB9XG5cbiAgICBhZGRDbGlja0V2ZW50KGNvbXBvbmVudFJlZmVyZW5jZU5hbWUpe1xuICAgICAgICBpZiAodHlwZW9mICB0aGlzLmNsaWNrRXZlbnRzQ291bnRlci5jb21wb25lbnRSZWZlcmVuY2VOYW1lID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tFdmVudHNDb3VudGVyW2NvbXBvbmVudFJlZmVyZW5jZU5hbWVdPTA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGlja0V2ZW50c0NvdW50ZXJbY29tcG9uZW50UmVmZXJlbmNlTmFtZV0rKztcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpY2tFdmVudHNDb3VudGVyW2NvbXBvbmVudFJlZmVyZW5jZU5hbWVdO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlc3RNYW5hZ2VyKCk7IiwiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gXCIuLi8uLi9idWlsZC9TbWFydENvbXBvbmVudEpTXCI7XG5pbXBvcnQgVGVzdE1hbmFnZXIgZnJvbSBcIi4uL1Rlc3RNYW5hZ2VyXCI7XG5cbmNsYXNzIFRlc3RDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnR7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LHBhcmVudENvbXBvbmVudCxwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCxwYXJlbnRDb21wb25lbnQscGFyYW1zKTtcbiAgICB9XG5cbiAgICBjbGlja0hhbmRsZXIoKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jb21wb25lbnRSZWZlcmVuY2VOYW1lKTtcbiAgICAgICAgVGVzdE1hbmFnZXIuYWRkQ2xpY2tFdmVudCh0aGlzLmNvbXBvbmVudFJlZmVyZW5jZU5hbWUpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXN0Q29tcG9uZW50OyIsImltcG9ydCB7QXBwUmVnaXN0cnl9ICBmcm9tIFwiLi4vYnVpbGQvU21hcnRDb21wb25lbnRKU1wiO1xuaW1wb3J0IFRlc3RNYW5hZ2VyIGZyb20gXCIuL1Rlc3RNYW5hZ2VyXCI7XG5pbXBvcnQgVGVzdENvbXBvbmVudCBmcm9tIFwiLi90ZXN0Q29tcG9uZW50cy9UZXN0Q29tcG9uZW50XCI7XG5BcHBSZWdpc3RyeS5yZWdpc3RlckNvbXBvbmVudHMoe1Rlc3RDb21wb25lbnR9KTtcblxubGV0IHRlc3RDb21wb25lbnQ9bnVsbDtcblxuZGVzY3JpYmUoJ1Rlc3RDb21wb25lbnQxIC0gSW5zdGFuY2UgYnkgbmFtZScsIGZ1bmN0aW9uKCkge1xuICAgIHRlc3RDb21wb25lbnQgPSBBcHBSZWdpc3RyeS5pbml0Q29tcG9uZW50QnlOYW1lKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtjb21wb25lbnQtcmVmZXJlbmNlLW5hbWU9XCJUZXN0Q29tcG9uZW50MVwiXWApLFwiVGVzdENvbXBvbmVudFwiKTtcbiAgICBpdCgnVGVzdENvbXBvbmVudDEgLSBzaG91bGQgYmUgaW5zdGFuY2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFzc2VydC5lcXVhbCh0ZXN0Q29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWUsIFwiVGVzdENvbXBvbmVudFwiKTtcbiAgICB9KTtcbiAgICBpdCgnVGVzdENvbXBvbmVudDEgLSBzaG91bGQgYmUgcmV0cmlldmVkIGluIGNvbXBvbmVudHMgb2JqZWN0IGJ5IHJlZmVyZW5jZSBuYW1lICcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBhc3NlcnQuZXF1YWwodGVzdENvbXBvbmVudC5jb21wb25lbnRzW1wiVGVzdENvbXBvbmVudDFcIl0uY29tcG9uZW50UmVmZXJlbmNlTmFtZSwgXCJUZXN0Q29tcG9uZW50MVwiKTtcbiAgICB9KTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdUZXN0Q29tcG9uZW50MSAtIGxvYWQgY2hpbGQgY29tcG9uZW50cyBwYXNzaW5nIGxpa2UgcGFyZW50IFRlc3RDb21wb25lbnQxJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ1Rlc3RDb21wb25lbnQyIC0gVGVzdENvbXBvbmVudDEgc2hvdWxkIGJlIHByZXNlbnQgbGlrZSBUZXN0Q29tcG9uZW50MiBwYXJlbnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGxvYWRlZENvbXBvbmVudHMgPSB0ZXN0Q29tcG9uZW50LmxvYWRDaGlsZENvbXBvbmVudHModGVzdENvbXBvbmVudCk7XG4gICAgICAgIGxldCB0ZXN0Q29tcG9uZW50Mj1sb2FkZWRDb21wb25lbnRzLmZpbHRlcigoY29tcG9uZW50KT0+e1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5jb21wb25lbnRSZWZlcmVuY2VOYW1lPT1cIlRlc3RDb21wb25lbnQyXCI7XG4gICAgICAgIH0pWzBdO1xuICAgICAgICBhc3NlcnQuZXF1YWwodGVzdENvbXBvbmVudDIucGFyZW50Q29tcG9uZW50LmNvbXBvbmVudFJlZmVyZW5jZU5hbWUsIFwiVGVzdENvbXBvbmVudDFcIik7XG4gICAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3RDb21wb25lbnQyIGNvbXBvbmVudC1jbGljayAtIGNsaWNrIG9uIFRlc3RDb21wb25lbnQyIGNoaWxkIHdpdGggY29tcG9uZW50LWNsaWNrIGF0dHJpYnV0ZScsIGZ1bmN0aW9uKCkge1xuICAgIGxldCBjbGlja0V2ZW50c051bWJlckJlZm9yZT1UZXN0TWFuYWdlci5nZXRDbGlja0V2ZW50cyhcIlRlc3RDb21wb25lbnQyXCIpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtjb21wb25lbnQtcmVmZXJlbmNlLW5hbWU9XCJUZXN0Q29tcG9uZW50MlwiXSBbY29tcG9uZW50LWNsaWNrPVwiY2xpY2tIYW5kbGVyKClcIl1gKS5jbGljaygpO1xuICAgICAgICBpdCgnVGVzdENvbXBvbmVudDIgLSBjbGlja0V2ZW50c051bWJlciBtdXN0IGJlIGluY3JlYXNlIG9mIG9uZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFRlc3RNYW5hZ2VyLmdldENsaWNrRXZlbnRzKFwiVGVzdENvbXBvbmVudDJcIiksIChjbGlja0V2ZW50c051bWJlckJlZm9yZSsxKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LDEwMDApXG4gICAgICAgICAgICB9KS50aGVuKGRvbmUpO1xuICAgICAgICB9KTtcbn0pO1xuXG5cbiJdLCJuYW1lcyI6WyJUZXN0TWFuYWdlciIsIkFwcFJlZ2lzdHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNLFdBQVcsQ0FBQztJQUNkLFdBQVcsR0FBRztRQUNWLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0tBQ3hCOzs7SUFHRCxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsa0JBQWtCLEdBQUc7WUFDekQsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQzthQUNwRjtTQUNKLENBQUMsQ0FBQztLQUNOOzs7SUFHRCxp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
